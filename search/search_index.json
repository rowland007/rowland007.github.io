{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview This site is used to keep notes on things I have learned for writing code, documentation, and signing code. It also is used to test out some of the features for documentation purpose. I am not really looking for pull requests but if you notice something that is false or could be a security issue, please open an issue and create a pull requests. Just ensure you re able to explain the issue fully and have references that can back it up. Hopefully, you can learn something from this page as well.","title":"About"},{"location":"#overview","text":"This site is used to keep notes on things I have learned for writing code, documentation, and signing code. It also is used to test out some of the features for documentation purpose. I am not really looking for pull requests but if you notice something that is false or could be a security issue, please open an issue and create a pull requests. Just ensure you re able to explain the issue fully and have references that can back it up. Hopefully, you can learn something from this page as well.","title":"Overview"},{"location":"mkdocs/example/","text":"mkdocs.yml Example site_name: MkDocs Test Document site_url: https://rowland007.github.io/ site_description: Testing out MkDocs tools. site_author: Randy Rowland repo_url: https://github.com/rowland007/rowland007.github.io/ strict: true theme: windmill markdown_extensions: - smarty - attr_list - admonition - toc: permalink: True plugins: - search: lang: en nav: - About: index.md - Security: - GPG: security/gpg.md - Syncthing: security/syncthing.md","title":"Example mkdocs File"},{"location":"mkdocs/example/#mkdocsyml-example","text":"site_name: MkDocs Test Document site_url: https://rowland007.github.io/ site_description: Testing out MkDocs tools. site_author: Randy Rowland repo_url: https://github.com/rowland007/rowland007.github.io/ strict: true theme: windmill markdown_extensions: - smarty - attr_list - admonition - toc: permalink: True plugins: - search: lang: en nav: - About: index.md - Security: - GPG: security/gpg.md - Syncthing: security/syncthing.md","title":"mkdocs.yml Example"},{"location":"mkdocs/github/","text":"Overview To be able to get this document to work, I had to use two different repos. Github does not like the markdown and mkdocs.yml config file. You have to use mkdocs build or mkdocs gh-deploy to convert the files into html so it will display properly on github. One of the repos holds the markdown files. The deploying repo holds the html files and hosts the site. To better explain this we will call the repo with the markdown, markdown-repo and the deploying repo, site-repo . Setup On your local computer, navigate to your working directory that will hold both repos. You will need to run the following command: mkdocs new markdown-repo This will create a docs folder and mkdocs.yml file inside the markdown-repo . You will find your index.md file inside docs and you will have to configure the mkdocs.yml file with the navigation, theme, and other settings. Look at the example to see how to set it up. You will have to add the site directory to the .gitignore file. The site directory will hold the html files that will be moved over to the site-repo for deployment. To get an empty site directory, run the following command: mkdocs build --clean Once the site directory is added to the ignore file, you can delete the site folder. Move to your site-repo and create a new develop branch. This will allow you to create a README on master without overwriting it when you do site updates. Executing The over all steps are to create your site in the markdown-repo . Use mkdocs serve to preview a live version of the website. When you have it the way you want, push it to Github. Then run the mkdocs build --clean command. Once you get the site directory you can run: mv site/* ../site-repo Move back to your site-repo and ensure you re on the develop branch. Push to Github. Checkout your master branch and merge develop into master . This should auto-publish your site if you have set up the repos settings to publish from the master branch. You can now checkout the develop branch and delete all the files. You develop branch is now ready for the next update.","title":"Working with Github"},{"location":"mkdocs/github/#overview","text":"To be able to get this document to work, I had to use two different repos. Github does not like the markdown and mkdocs.yml config file. You have to use mkdocs build or mkdocs gh-deploy to convert the files into html so it will display properly on github. One of the repos holds the markdown files. The deploying repo holds the html files and hosts the site. To better explain this we will call the repo with the markdown, markdown-repo and the deploying repo, site-repo .","title":"Overview"},{"location":"mkdocs/github/#setup","text":"On your local computer, navigate to your working directory that will hold both repos. You will need to run the following command: mkdocs new markdown-repo This will create a docs folder and mkdocs.yml file inside the markdown-repo . You will find your index.md file inside docs and you will have to configure the mkdocs.yml file with the navigation, theme, and other settings. Look at the example to see how to set it up. You will have to add the site directory to the .gitignore file. The site directory will hold the html files that will be moved over to the site-repo for deployment. To get an empty site directory, run the following command: mkdocs build --clean Once the site directory is added to the ignore file, you can delete the site folder. Move to your site-repo and create a new develop branch. This will allow you to create a README on master without overwriting it when you do site updates.","title":"Setup"},{"location":"mkdocs/github/#executing","text":"The over all steps are to create your site in the markdown-repo . Use mkdocs serve to preview a live version of the website. When you have it the way you want, push it to Github. Then run the mkdocs build --clean command. Once you get the site directory you can run: mv site/* ../site-repo Move back to your site-repo and ensure you re on the develop branch. Push to Github. Checkout your master branch and merge develop into master . This should auto-publish your site if you have set up the repos settings to publish from the master branch. You can now checkout the develop branch and delete all the files. You develop branch is now ready for the next update.","title":"Executing"},{"location":"mkdocs/install/","text":"Installing mkdocs MkDocs is a fast, simple and downright gorgeous static site generator that s geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can try to install mkdocs via a package manager sudo [apt | dnf] install -y mkdocs However, all repositories seem to be out of date install a very old version. It is recommended to install it through pip . Manual Installation In order to manually install MkDocs you ll need Python installed on your system, as well as the Python package manager, pip . sudo [apt | dnf] install python-pip pip install mkdocs Ensure you do not use sudo with pip . It will make it difficult to use mkdocs as you will have to be root or use sudo each time. It will also make the owner root for the files it creates.","title":"Installation"},{"location":"mkdocs/install/#installing-mkdocs","text":"MkDocs is a fast, simple and downright gorgeous static site generator that s geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can try to install mkdocs via a package manager sudo [apt | dnf] install -y mkdocs However, all repositories seem to be out of date install a very old version. It is recommended to install it through pip .","title":"Installing mkdocs"},{"location":"mkdocs/install/#manual-installation","text":"In order to manually install MkDocs you ll need Python installed on your system, as well as the Python package manager, pip . sudo [apt | dnf] install python-pip pip install mkdocs Ensure you do not use sudo with pip . It will make it difficult to use mkdocs as you will have to be root or use sudo each time. It will also make the owner root for the files it creates.","title":"Manual Installation"},{"location":"security/gpg/","text":"GPG Import To import the gpg software signing key, open seahorse and search for 0xF32E17D74D6DE172 . Once key is locate and downloaded run: gpg -K Look to ensure the key is added.","title":"GPG"},{"location":"security/gpg/#gpg-import","text":"To import the gpg software signing key, open seahorse and search for 0xF32E17D74D6DE172 . Once key is locate and downloaded run: gpg -K Look to ensure the key is added.","title":"GPG Import"},{"location":"security/signing-software/","text":"Signing Commits git config --global commit.gpgsign true git commit -S -m your_commit_message # Creates a signed commit Signed Verifying Releases A digital signature certifies and timestamps a file. If the file is subsequently modified in any way, a verification of the signature will fail. A digital signature can serve the same purpose as a hand-written signature with the additional benefit of being tamper-resistant. The GnuPG source distribution, for example, is signed so that users can verify that the source code has not been modified since it was packaged. To download my signing key, use either one of the methods below. Both commands will download the same key. gpg --keyserver hkp://pgp.mit.edu --recv-keys 8ACD28A5 curl https://keybase.io/randarxj7/key.asc | gpg --import Once you have my key, you can verify files by using the command. gpg --verify key.asc file.zip or gpg --verify file.zip.sig file.zip You should see a message like the following: gpg: Signature made Sat 29 Jul 2017 12:14:18 AM CDT using RSA key ID BE6ED428 gpg: Good signature from Randy Rowland rowland007@gmail.com You want to see Good signature . Signing Releases gpg --output file.sig --detach-sign file or gpg -ab file this will create file.asc If you need to put the signature inside of a text file you can use gpg --clearsign file.txt -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 gpg --keyserver hkp://pgp.mit.edu --recv-keys 8ACD28A5 curl https://keybase.io/randarxj7/key.asc | gpg --import -----BEGIN PGP SIGNATURE----- Version: GnuPG v1 iQIcBAEBAgAGBQJZfBthAAoJEL/0LvG+btQosIYP/RV1dCEKEbT56HnSx+/vK24J 0VqaUtSZqbb9PWARPL4ji26m0QfxTgbVxXWo8OT0m4vAOS9cRKov7hgZQhbOqC4a WU/Hso02hsZv/0kMgyor48G4tVehPcPJU4oo3bpAfVJqz/CUOCn0QtU0FPJwFV5M 0wVeeGuHhMXlNhyC++uxiBwwqVFMdL4iO1PijvBGoduxyt/uoBN8q2Z7cQyVI2n6 0PFPShvcU28MZbEaKYv4cRCTBb3OGkA9tteiRtwArN9+QdCYHxwoRos6fFxbt1xi x6YxprbalwS05Lgrxo7k5OarmUr23WBLMT5KXFUGUJXU9pV9CNvp41W6VpjwT71i RrjO9BVudjQz6mhn64u6uiBWNmX9VhME7M615eMk1oUpGVKBiYfMLTTiaGyl8QYE 6rdZPWquNXflE2gmBzeYBgjhjOpkNVFdoVSToAZgOLvE2jRNFwa4KuybnPFq5Od+ YGgUELIVockUafttkB4CiBXH2LdahnoHmq8SlgEL8aYb0aI3khqpv0mW5iN/sgja 0oIoNOzK8O4Gf2wM8kugmEvN67mZTyioDrP4Oy3C9DIL7hqjSegrlp95wlZ0CK2y X/pPjtg5kPfcHbPD47BNiHLo5sh9ItwEhKFq6V/p8+zhO4hCiqRM239wi4FDGvx0 Qog57bj6lHGqzmOHSvX5 =H2Vm -----END PGP SIGNATURE----- To verify this, you just need to run gpg --verify keys.asc This method does not require two files.","title":"Signing Software"},{"location":"security/signing-software/#signing-commits","text":"git config --global commit.gpgsign true git commit -S -m your_commit_message # Creates a signed commit","title":"Signing Commits"},{"location":"security/signing-software/#signed-verifying-releases","text":"A digital signature certifies and timestamps a file. If the file is subsequently modified in any way, a verification of the signature will fail. A digital signature can serve the same purpose as a hand-written signature with the additional benefit of being tamper-resistant. The GnuPG source distribution, for example, is signed so that users can verify that the source code has not been modified since it was packaged. To download my signing key, use either one of the methods below. Both commands will download the same key. gpg --keyserver hkp://pgp.mit.edu --recv-keys 8ACD28A5 curl https://keybase.io/randarxj7/key.asc | gpg --import Once you have my key, you can verify files by using the command. gpg --verify key.asc file.zip or gpg --verify file.zip.sig file.zip You should see a message like the following: gpg: Signature made Sat 29 Jul 2017 12:14:18 AM CDT using RSA key ID BE6ED428 gpg: Good signature from Randy Rowland rowland007@gmail.com You want to see Good signature .","title":"Signed &amp; Verifying Releases"},{"location":"security/signing-software/#signing-releases","text":"gpg --output file.sig --detach-sign file or gpg -ab file this will create file.asc If you need to put the signature inside of a text file you can use gpg --clearsign file.txt -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 gpg --keyserver hkp://pgp.mit.edu --recv-keys 8ACD28A5 curl https://keybase.io/randarxj7/key.asc | gpg --import -----BEGIN PGP SIGNATURE----- Version: GnuPG v1 iQIcBAEBAgAGBQJZfBthAAoJEL/0LvG+btQosIYP/RV1dCEKEbT56HnSx+/vK24J 0VqaUtSZqbb9PWARPL4ji26m0QfxTgbVxXWo8OT0m4vAOS9cRKov7hgZQhbOqC4a WU/Hso02hsZv/0kMgyor48G4tVehPcPJU4oo3bpAfVJqz/CUOCn0QtU0FPJwFV5M 0wVeeGuHhMXlNhyC++uxiBwwqVFMdL4iO1PijvBGoduxyt/uoBN8q2Z7cQyVI2n6 0PFPShvcU28MZbEaKYv4cRCTBb3OGkA9tteiRtwArN9+QdCYHxwoRos6fFxbt1xi x6YxprbalwS05Lgrxo7k5OarmUr23WBLMT5KXFUGUJXU9pV9CNvp41W6VpjwT71i RrjO9BVudjQz6mhn64u6uiBWNmX9VhME7M615eMk1oUpGVKBiYfMLTTiaGyl8QYE 6rdZPWquNXflE2gmBzeYBgjhjOpkNVFdoVSToAZgOLvE2jRNFwa4KuybnPFq5Od+ YGgUELIVockUafttkB4CiBXH2LdahnoHmq8SlgEL8aYb0aI3khqpv0mW5iN/sgja 0oIoNOzK8O4Gf2wM8kugmEvN67mZTyioDrP4Oy3C9DIL7hqjSegrlp95wlZ0CK2y X/pPjtg5kPfcHbPD47BNiHLo5sh9ItwEhKFq6V/p8+zhO4hCiqRM239wi4FDGvx0 Qog57bj6lHGqzmOHSvX5 =H2Vm -----END PGP SIGNATURE----- To verify this, you just need to run gpg --verify keys.asc This method does not require two files.","title":"Signing Releases"},{"location":"security/syncthing/","text":"Overview When utilizing Syncthing between desktop computers, phones, and the Syncthing server, files located on the server may be plaintext. This could cause compromise if someone was to gain access to the files on the server if the server is on. The hard drive is encrypted but only when power is removed. To increase security, all files should be synced using Cryptomator. This will ensure files at rest on the server are always encrypted. This will also ensure files are encrypted as they transverse through the internet and prevent unauthorized access should the modem/router/wi-fi be compromised. This document covers how to setup the correct file structure per VM or OS. File Management The idea is to have the folders of the encrypted files synced in another location besides the Document like folders. Then when utilizing Cryptomator to decrypt the files and mount it to a location, Document could be mounted over with the decrypted files. This could also server a decoy with fake files located in Document if the device happens to be investigated. [ UPDATE ] Cryptomator will not allow the decrypted files to be mounted over other files. The directory must be empty. Example Within the /home/$USER/ directory, you utilize one directory to hold all the encrypted sync files. For example /home/$USER/Sync/ and within that folder would have all the Cryptomator vaults. The following example is for a school-used device. In /home/$USER/Sync/ create a new vault called documents and photos . This will create new directories so the file structure will now look like /home/$USER/Sync/documents/masterkey.cryptomator and /home/$USER/Sync/photos/masterkey.cryptomator . When going to decrypt them, click the more options button. Use the Custom Mount Point and select the proper folder within the /home/$USER/ folder. Notes Syncthing should only be used for working documents. Once the file is ready for archive purposes, it should be moved to the Nextcloud server. The Nextcloud server provides encryption at rest and the ability to access the file through the application or web if needed for reference. A list of Syncthing devices and folder IDs should be placed on a secure and encrypted server. This will allow new devices to add previous devices and folder IDs so syncing can happen.","title":"Syncthing"},{"location":"security/syncthing/#overview","text":"When utilizing Syncthing between desktop computers, phones, and the Syncthing server, files located on the server may be plaintext. This could cause compromise if someone was to gain access to the files on the server if the server is on. The hard drive is encrypted but only when power is removed. To increase security, all files should be synced using Cryptomator. This will ensure files at rest on the server are always encrypted. This will also ensure files are encrypted as they transverse through the internet and prevent unauthorized access should the modem/router/wi-fi be compromised. This document covers how to setup the correct file structure per VM or OS.","title":"Overview"},{"location":"security/syncthing/#file-management","text":"The idea is to have the folders of the encrypted files synced in another location besides the Document like folders. Then when utilizing Cryptomator to decrypt the files and mount it to a location, Document could be mounted over with the decrypted files. This could also server a decoy with fake files located in Document if the device happens to be investigated. [ UPDATE ] Cryptomator will not allow the decrypted files to be mounted over other files. The directory must be empty.","title":"File Management"},{"location":"security/syncthing/#example","text":"Within the /home/$USER/ directory, you utilize one directory to hold all the encrypted sync files. For example /home/$USER/Sync/ and within that folder would have all the Cryptomator vaults. The following example is for a school-used device. In /home/$USER/Sync/ create a new vault called documents and photos . This will create new directories so the file structure will now look like /home/$USER/Sync/documents/masterkey.cryptomator and /home/$USER/Sync/photos/masterkey.cryptomator . When going to decrypt them, click the more options button. Use the Custom Mount Point and select the proper folder within the /home/$USER/ folder.","title":"Example"},{"location":"security/syncthing/#notes","text":"Syncthing should only be used for working documents. Once the file is ready for archive purposes, it should be moved to the Nextcloud server. The Nextcloud server provides encryption at rest and the ability to access the file through the application or web if needed for reference. A list of Syncthing devices and folder IDs should be placed on a secure and encrypted server. This will allow new devices to add previous devices and folder IDs so syncing can happen.","title":"Notes"}]}